<?php
/**
 * @file
 * Main file for the message UI module.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\message\Entity\Message;
use Drupal\message\Entity\MessageType;
use Drupal\Core\Entity\Entity\EntityFormDisplay;

/**
 * Grant permission for the operation upon message.
 */
define('MESSAGE_UI_ALLOW', TRUE);

/**
 * Deny permission for the operation upon message.
 */
define('MESSAGE_UI_DENY', FALSE);

/**
 * Get list of the messages.
 *
 * @todo : remove if unnecessary. Does MessageType:loadMultiple replace this?
 */
function message_ui_get_types() {

  $query = \Drupal::entityQuery('message_type');
  $result = $query->execute();

  if (empty($result['message_type'])) {
    return NULL;
  }

  $message_types = MessageType::loadMultiple($result);

  $list = array();

  foreach ($message_types as $message_type) {
    $list[$message_type->getLabel()] = $message_type->getDescription();
  }

  return $list;
}

/**
 * Check if the user can create an instance for a message type.
 *
 * @param $type
 *  The message type for which the info shall be returned, or NULL to return an
 *  array with info about all types.
 * @param $account
 *  The user object or user uid.
 *
 * @return array|bool
 *  TRUE or FALSE for a specific message type or an array of the message types
 */
// @todo: Access related fn, used by instance list. Where should this be in D8?
function message_ui_user_can_create_message($type = NULL, User $account = NULL) {
  if (empty($account)) {
    $account = \Drupal::currentUser();
  }

  $types = message_ui_get_types();

  // User have access to create any instances.
  if ($account->hasPermission('create any message instance')) {
    return TRUE;
  }

  // Check access for a specific message.
  if ($type) {

    // Didn't found that type.
    if (!in_array($type, $types)) {
      return FALSE;
    }

    if ($account->hasPermission('create a ' . $type . ' message instance')) {
      return TRUE;
    }
  }

  // Build list of arrays for the permissions.
  $permissions = array();
  foreach (array_keys($types) as $type) {
    $permissions[$type] = $account->hasPermission('create a ' . $type . ' message instance');
  }

  return $permissions;
}

/**
 * Implements hook_cron_queue_info().
 */
// @todo: replace with annotated classes: https://www.drupal.org/node/2341649.
function message_ui_cron_queue_info() {
  $items['message_ui_arguments'] = array(
    'title' => t('Message UI arguments'),
    'worker callback' => 'message_ui_arguments_worker',
    'time' => 60,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
// @todo: should this be moved to Twig template?
function message_ui_theme() {
  return array(
    'message_ui_create_message' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Theme callback - display list of the message types in the proper way.
 */
// @todo: should this be moved to Twig template?
function theme_message_ui_create_message($variables) {
  $items = $variables['items'];

  $output = '<ul class="admin-list">';

  foreach ($items as $item) {
    $output .= '<li class="clearfix">';

    $url = Url::fromUri('admin/content/message/create/' . str_replace('_', '-', $item['type']));
    $internal_link = \Drupal::l(ucfirst(str_replace('_', ' ', $item['type'])), $url);

    $output .= '<span class="label">' . $internal_link;
    $output .= '<div class="description">' . t('Create a message instance of @type', array('@type' => $item['name'])) . '</div>';
    $output .= '</li>';
  }

  $output .= '</ul>';

  return $output;
}

/**
 * Display list of message types to create an instance for them.
 */
// @todo: move to a getInstanceList() method in MessageUIController.
function message_ui_create_new_message_instance_list() {
  $items = array();
  $allowed_types = message_ui_user_can_create_message();

  if ($types = message_ui_get_types()) {
    foreach ($types as $type => $title) {
      if ($allowed_types || (is_array($allowed_types) && $allowed_types[$type])) {
        $items[] = array('type' => $type, 'name' => $title,);
      }
    }

    $item_list = array(
      '#theme' => 'message_ui_create_message', // Should this be item_list?
      '#items' => $items,
      '#type' => 'ul',
    );

    return \Drupal::service('renderer')->render($item_list);
  }
  else {
    $url = Url::fromRoute('message.type_add');
    return t("There are no messages types. You can create a new message type <a href='$url'>here</a>.");
  }

}

/**
 * Get hard coded arguments.
 *
 * @param $type
 *  The message type.
 * @param $count
 *  Determine weather to the count the arguments or return a list of them.
 * @return int
 *  The number of the arguments.
 */
function message_ui_message_arguments($type, $count = FALSE) {
  /* @var $message_type MessageType */
  $message_type = MessageType::load($type);

  if (!$output = $message_type->getText()) {
    return FALSE;
  }

  preg_match_all('/[@|%|\!]\{([a-z0-9:_\-]+?)\}/i', $output, $matches);

  return $count ? count($matches[0]) : $matches[0];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function message_ui_form_message_user_admin_settings_alter(&$form, $form_state) {
  $form['update_tokens'] = array(
    '#type' => 'fieldset',
    '#itle' => t('Token update settings'),
  );
  $form['update_tokens']['update_tokens_update_tokens'] = array(
    '#type' => 'checkbox',
    '#title' => t('Update messages arguments'),
    '#description' => t('When editing a message type, the user can add or delete arguments. When this is checked, you can choose how to update to messages arguments.'),
    '#default_value' => \Drupal::config('message_ui.settings')->get('update_tokens.update_tokens'),
  );

  $form['update_tokens']['update_tokens_how_to_act'] = array(
    '#type' => 'select',
    '#title' => t('Choose how to act'),
    '#default_value' => \Drupal::config('message_ui.settings')->get('update_tokens.how_to_act'),
    '#options' => array(
      'update_when_removed' => t('Update messages when tokens are removed'),
      'update_when_added' => t('Update messages when tokens are added'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="update_tokens_update_tokens"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['update_tokens']['update_tokens_how_update'] = array(
    '#type' => 'select',
    '#title' => t('Choose how to update the messages'),
    '#default_value' => \Drupal::config('message_ui.settings')->get('update_tokens.how_update'),
    '#options' => array(
      'update_with_batch' => t('Update messages with batch API'),
      'update_when_item' => t('Update messages with queue item'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="update_tokens_update_tokens"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['update_tokens']['update_tokens_number_items'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#title' => t('Items to process each time.'),
    '#description' => t('Choose how much items to process each iteration.'),
    '#default_value' => \Drupal::config('message_ui.settings')->get('update_tokens.number_items'),
    '#states' => array(
      'visible' => array(
        ':input[name="update_tokens_update_tokens"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['message_ui_show_preview'] = array(
    '#type' => 'radios',
    '#title' => t('Show/hide preview'),
    '#default_value' => \Drupal::config('message_ui.settings')->get('show_preview'),
    '#options' =>  array(
      TRUE =>  t('Show preview'),
      FALSE => t('Hide preview'),
    ),
    '#description' => t('Show/hide the text of the message when editing an instance of the message.'),
  );
}

/**
 * Form submit handler for admin form message_user_admin_settings.
 *
 * Update message_ui configuration on form submit.
 *
 * @param $form
 * @param $form_state
 */
function message_ui_form_message_user_admin_settings_submit($form, &$form_state) {

  $config = \Drupal::configFactory()->getEditable('message_ui.settings');

  // @todo - step through & check if nested 'update_tokens' index is required.
  $config->set('update_tokens.update_tokens', $form_state['values']['update_tokens_update_tokens'] );

  $config->set('update_tokens.how_to_act', $form_state['values']['update_tokens_how_to_act'] );

  // @todo: Does how_update need a default setting explicitly set in yaml file?
  $config->set('update_tokens.how_update', $form_state['values']['update_tokens_how_update'] );

  $config->set('update_tokens.number_items', $form_state['values']['update_tokens_number_items'] );

  $config->set('show_preview', $form_state['values']['message_ui_show_preview'] );

  $config->save();
}

/**
 * Implements hook_entity_update().
 *
 * Submit handler for updating the arguments number.
 *
 * When a message type is been edited, there could be a change in the arguments
 * of the message - added or removed.
 * If this has been defined, we need to update the arguments of the other
 * messages. This will be achieved by in two steps:
 * 1. Load an instance of the message from the same type
 * 2. Cont the number of the arguments and if there is a difference between the
 *    number of the arguments from the old message to the current one - create
 *    a batch or a queue and update the messages.
 */
function message_ui_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  $type = $entity->getEntityType()->getLabel();

  if ($type != 'message_type') {
    return FALSE;
  }

  $query = \Drupal::entityQuery('message');
  $result = $query
    ->condition('type', $type)
    ->range(0, 1)
    ->sort('mid', 'DESC')
    ->execute();

  // There is no messages from this type.
  if (empty($result['message'])) {
    return FALSE;
  }

  $keys = array_keys($result['message']);
  $message = Message::load(reset($keys));
  $new_arguments = message_ui_message_arguments($type);

  $old_arguments_number = count($message->getArguments());
  $new_arguments_number = count($new_arguments);
  $how_to_act = \Drupal::config('message_ui.settings')->get('update_tokens.how_to_act');

  $update['when_added'] = $old_arguments_number < $new_arguments_number && $how_to_act == 'update_when_added';
  $update['when_removed'] = $old_arguments_number > $new_arguments_number && $how_to_act == 'update_when_removed';

  if (!($update['when_added'] || $update['when_removed'])) {
    return FALSE;
  }

  $item_to_process = \Drupal::config('message_ui.settings')->get('update_tokens.number_items');
  $how_update = \Drupal::config('message_ui.settings')->get('update_tokens.how_update');

  if ($how_update == 'update_with_batch') {

    // Get all the messages.
    $query = \Drupal::entityQuery('message');
    $result = $query
      ->condition('type', $type)
      ->sort('mid', 'DESC')
      ->execute();

    $chunks = array_chunk(array_keys($result['message']), $item_to_process);
    $operations = array();
    foreach ($chunks as $chunk) {
      $operations[] = array('message_ui_arguments_update', array($chunk, $new_arguments));
    }

    // Set the batch.
    $batch = array(
      'operations' => $operations,
      'finished' => 'message_ui_message_arguments_update',
      'title' => t('Updating the messages arguments.'),
      'init_message' => t('Start process messages.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Example Batch has encountered an error.'),
    );
    batch_set($batch);
    batch_process('admin/structure/messages');
  }
  elseif ($how_update == 'update_when_item') {
    // Define the queue item data.
    $data = array(
      'type' => $type,
      'last_mid' => 0,
      'new_arguments' => $new_arguments,
      'item_to_process' => $item_to_process,
    );

    // Set the queue worker.
    $queue = \Drupal::queue('message_ui_arguments');
    return $queue->createItem($data);
  }
}

/**
 * The message batch or queue item callback function.
 *
 * @param $mids
 *  The messages ID for process.
 * @param $arguments
 *  The new state arguments.
 */
function message_ui_arguments_update($mids, $arguments) {
  // Load the messages and update them.
  $messages = Message::loadMultiple($mids);

  foreach ($messages as $message) {
    _message_ui_arguments_update($message, $arguments);
  }
}

/**
 * Update the message arguments via a queue worker.
 */
function message_ui_arguments_worker($data) {

  // Load all of the messages.
  $query = \Drupal::entityQuery('message');
  $result = $query
    ->condition('type', $data['type'])
    ->sort('mid', 'DESC')
    ->condition('mid', $data['last_mid'], '>=')
    ->range(0, $data['item_to_process'])
    ->execute();

  if (empty($result['message'])) {
    return FALSE;
  }
  
  // Update the messages.
  $messages = Message::loadMultiple(array_keys($result['message']));
  foreach ($messages as $message) {
    _message_ui_arguments_update($message, $data['new_arguments']);
    $data['last_mid'] = $message->id();
  }

  // Create the next queue worker.
  $queue = \Drupal::queue('message_ui_arguments');
  return $queue->createItem($data);
}

/**
 * A helper function for generate a new array of the message's arguments.
 *
 * @param Message $message
 *  The message which her arguments need an update.
 * @param array $arguments
 *  The new arguments need to be calculated.
 */
function _message_ui_arguments_update(Message $message, $arguments) {

  $message_arguments = array();

  foreach ($arguments as $token) {
    // Get the hard coded value of the message and him in the message.
    $token_name = str_replace(array('@{', '}'), array('[', ']'), $token);
    $token_service = Drupal::token();
    $value = $token_service->replace($token_name, array('message' => $message));

    $message_arguments[$token] = $value;
  }

  $message->getArguments() = $message_arguments;
  $message->save();
}

/**
 * The UI for creating/editing the message.
 */
// @todo : move to MessageForm form class.
function message_ui_instance_message_manage($form, &$form_state, Message $message) {
  if (!is_object($message)) {
    $message = Message::create($message);
  }

  $form_state['#entity'] = $message;
  $message_text = $message->view();

  if (\Drupal::config('message_ui.settings')->get('update_tokens.show_preview')) {
    $form['text'] = array(
      '#type' => 'item',
      '#title' => t('Message text'),
      '#markup' => render($message_text),
    );
  }

  $display = EntityFormDisplay::collectRenderDisplay($message, 'default');
  $display->buildForm($message, $form, $form_state);

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  $form['owner'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authoring information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('message-form-owner'),
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'message_ui') . '/js/message_ui.js',
        array(
          'type' => 'setting',

          'data' => array('anonymous' => \Drupal::config('message_ui.settings')->get('anonymous')),
        ),
      ),
    ),
    '#weight' => 90,
  );

  $form['owner']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored by'),
    '#maxlength' => 60,
    '#weight' => 99,
    '#autocomplete_path' => 'user/autocomplete',
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => \Drupal::config('message_ui.settings')->get('anonymous'))),
    '#default_value' => User::load($message->getAuthorId())->getUsername(),
  );

  $form['owner']['date'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored on'),
    '#description' => t('Please insert in the format of @date', array(
      '@date' => date('Y-m-d j:i', $message->timestamp),
    )),
    '#default_value' => date('Y-m-d H:i', $message->timestamp),
    '#maxlength' => 25,
    '#weight' => 100,
  );

  $args = $message->getArguments();

  if (!empty($args) && (\Drupal::currentUser()->hasPermission('update tokens') || \Drupal::currentUser()->hasPermission('bypass message access control'))) {
    $form['tokens'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tokens and arguments'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#weight' => 110,
    );

    // Give the user an option to update the har coded tokens.
    $form['tokens']['replace_tokens'] = array(
      '#type' => 'select',
      '#title' => t('Update tokens value automatically'),
      '#description' => t('By default, the hard coded values will be replaced automatically. If unchecked - you can update their value manually.'),
      '#default_value' => 'no_update',
      '#options' => array(
        'no_update' => t("Don't update"),
        'update' => t('Update automatically'),
        'update_manually' => t('Update manually'),
      ),
    );

    $form['tokens']['values'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="replace_tokens"]' => array('value' => 'update_manually'),
        ),
      ),
    );

    // Build list of fields to update the tokens manually.
    foreach ($message->getArguments() as $name => $value) {
      $form['tokens']['values'][$name] = array(
        '#type' => 'textfield',
        '#title' => t("@name's value", array('@name' => $name)),
        '#default_value' => $value,
      );
    }
  }

  $mid = $message->id();
  $url = is_object($message) && !empty($mid) ? Url::fromRoute('message_ui.show_message', $message) : Url::fromRoute('message.overview_types');

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => empty($message->is_new) ? t('Update') : t('Create'),
      '#submit' => array('message_ui_instance_message_create_submit'),
    ),
    'cancel' => array(
      '#type' => 'markup',
      '#markup' => \Drupal::l(t('Cancel'), $url)
    ),
  );

  return $form;
}

/**
 * Deleting the message.
 */
// @todo: move to a (new) DeleteMessage form class?
function message_ui_instance_delete($form, &$form_state, Message $message) {
  // When the bundle is exported - display a message to the user.
  $form_state['#entity'] = $message;

  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete the @type message instance?',
      array('@type' => $message->getType())),
    'admin/content/message',
    t('Are you sure you want to delete the message instance? This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Delete multiple messages
 */
// @todo : move to DeleteMultiple form class.
function message_ui_delete_multiple_messages($form, $form_state) {
  $types = message_ui_get_types();

  $form['types'] = array(
    '#type' => 'select',
    '#title' => t('Message types'),
    '#description' => t('Select the message type your would like to delete message from.'),
    '#options' => $types,
    '#multiple' => TRUE,
    '#required' => TRUE,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
  );

  return $form;
}
